import React, { useEffect, useState } from "react";
import { View, Text, TextInput, Button, Alert } from "react-native";
import { useLocalSearchParams } from "expo-router";
import AsyncStorage from "@react-native-async-storage/async-storage";
// import notesData from "../notes.json";

const EditNote = () => {
	const { id } = useLocalSearchParams();
	const [note, setNote] = useState<{
		id: number;
		title: string;
		content: string;
		created_at: string;
	} | null>(null);
	const [content, setContent] = useState("");

	// Function to load notes from AsyncStorage
	const loadNotes = async () => {
		const notesData = await AsyncStorage.getItem("notesData");
		return notesData ? JSON.parse(notesData) : [];
	};

	// Find the note by ID when the component mounts
	useEffect(() => {
		console.log("Note ID from params:", id); // Log to check if the ID is correct
		const fetchNote = async () => {
			const notes = await loadNotes();
			console.log("Loaded notes data:", notes); // Log loaded notes data
			const currentNote = notes.find(
				(note: {
					id: number;
					title: string;
					content: string;
					created_at: string;
				}) => note.id === parseInt(id.toString(), 10)
			);

			if (currentNote) {
				console.log("Found note:", currentNote); // Log found note
				setNote(currentNote);
				setContent(currentNote.content); // Initialize content with current note's content
			} else {
				console.error(`No note found for id: ${id}`);
			}
		};

		if (id) {
			fetchNote();
		}
	}, [id]);

	// Function to save the updated note to AsyncStorage
	const saveNotes = async (updatedNotes: any[]) => {
		await AsyncStorage.setItem("notesData", JSON.stringify(updatedNotes));
	};

	const handleSave = async () => {
		if (note) {
			// Update the note's content
			const updatedNote = { ...note, content };

			// Fetch current notes data
			const notes = await loadNotes();

			// Find the index of the note that was edited and update it
			const updatedNotes = notes.map(n =>
				n.id === updatedNote.id ? updatedNote : n
			);

			// Save the updated notes data back to AsyncStorage
			await saveNotes(updatedNotes);

			// Show a success message
			Alert.alert(
				"Note Saved",
				"Note content has been updated successfully!"
			);

			// Optionally, log the updated note
			console.log("Updated Note:", updatedNote);
		} else {
			Alert.alert("Error", "Note not found!");
		}
	};

	if (!note) {
		return (
			<View className="flex-1 justify-center items-center">
				<Text className="text-lg text-red-500">Note not found</Text>
			</View>
		);
	}

	return (
		<View className="flex-1 p-4">
			<Text className="text-2xl font-bold mb-4">
				Editing Note: {note.title}
			</Text>

			<TextInput
				value={content}
				onChangeText={setContent}
				multiline
				style={{
					borderWidth: 1,
					borderColor: "#ccc",
					borderRadius: 5,
					padding: 10,
					fontSize: 16,
					height: 200, // adjustable height for the text area
				}}
			/>

			<Button title="Save Changes" onPress={handleSave} />
		</View>
	);
};

export default EditNote;
